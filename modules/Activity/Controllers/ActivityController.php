<?php

    namespace Modules\Activity\Controllers;
    use App\Http\Controllers\Controller;
    use Modules\Activity\Models\Activity;
    use Illuminate\Http\Request;
    use Modules\Activity\Models\ActivityCategory;
    use Modules\Location\Models\Location;
    use Modules\Review\Models\Review;
    use Modules\Core\Models\Attributes;
    use DB;

    class ActivityController extends Controller
    {
        protected $activityClass;
        protected $locationClass;
        protected $activityCategoryClass;
        protected $attributesClass;

        public function __construct()
        {
            $this->activityClass = Activity::class;
            $this->locationClass = Location::class;
            $this->activityCategoryClass = ActivityCategory::class;
            $this->attributesClass = Attributes::class;
        }
        public function callAction($method, $parameters)
        {
            if(setting_item('activity_disable'))
            {
                return redirect('/');
            }
            return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
        }

        public function index(Request $request)
        {
            $is_ajax = $request->query('_ajax');
            $list = call_user_func([$this->activityClass,'search'],$request);
            $markers = [];
            if (!empty($list)) {
                foreach ($list as $row) {
                    $markers[] = [
                        "id" => $row->id,
                        "title" => $row->title,
                        "lat" => (float)$row->map_lat,
                        "lng" => (float)$row->map_lng,
                        "gallery" => $row->getGallery(true),
                        "infobox" => view('Activity::frontend.layouts.search.loop-gird', ['row' => $row, 'disable_lazyload' => 1, 'wrap_class' => 'infobox-item'])->render(),
                        'marker' => url('images/icons/png/pin.png'),
                    ];
                }
            }
            $limit_location = 15;
            if( empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal" ){
                $limit_location = 1000;
            }
            $data = [
                'rows' => $list,
                'activity_category' => $this->activityCategoryClass::where('status', 'publish')->with(['translations'])->get()->toTree(),
                'activity_location' => $this->locationClass::where('status', 'publish')->with(['translations'])->limit($limit_location)->get()->toTree(),
                'activity_min_max_price' => $this->activityClass::getMinMaxPrice(),
                'markers' => $markers,
                "blank" => 1,
                "seo_meta" => $this->activityClass::getSeoMetaForPageList()
            ];
            $layout = setting_item("activity_layout_search", 'normal');
            if ($request->query('_layout')) {
                $layout = $request->query('_layout');
            }
            if ($is_ajax) {
                return $this->sendSuccess([
                    'html' => view('Activity::frontend.layouts.search-map.list-item', $data)->render(),
                    "markers" => $data['markers']
                ]);
            }
            $data['attributes'] = $this->attributesClass::where('service', 'activity')->with(['terms','translations'])->get();
            if ($layout == "map") {
                $data['body_class'] = 'has-search-map';
                $data['html_class'] = 'full-page';
                return view('Activity::frontend.search-map', $data);
            }
            return view('Activity::frontend.search', $data);
        }

        public function detail(Request $request, $slug)
        {
            $row = $this->activityClass::where('slug', $slug)->with(['location','translations','hasWishList'])->first();
            if ( empty($row) or !$row->hasPermissionDetailView()) {
                return redirect('/');
            }
            $translation = $row->translateOrOrigin(app()->getLocale());
            $activity_related = [];
            $location_id = $row->location_id;
            if (!empty($location_id)) {
                $activity_related = $this->activityClass::where('location_id', $location_id)->where("status","publish")->take(4)->whereNotIn('id', [$row->id])->with(['location','translations','hasWishList'])->get();
            }
            $review_list = $row->getReviewList();
            $data = [
                'row' => $row,
                'translation' => $translation,
                'activity_related' => $activity_related,
                'booking_data' => $row->getBookingData(),
                'review_list' => $review_list,
                'seo_meta' => $row->getSeoMetaWithTranslation(app()->getLocale(), $translation),
                'body_class'=>'is_single'
            ];
            $this->setActiveMenu($row);
            return view('Activity::frontend.detail', $data);
        }
    }
