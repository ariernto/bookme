<?php
namespace Modules\Event\Controllers;

use ICal\ICal;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\Booking\Models\Booking;
use Modules\Event\Models\Event;
use Modules\Event\Models\EventDate;
use Modules\FrontendController;

class AvailabilityController extends FrontendController{

    protected $eventClass;
    /**
     * @var EventDate
     */
    protected $eventDateClass;

    /**
     * @var Booking
     */
    protected $bookingClass;

    protected $indexView = 'Event::frontend.user.availability';

    public function __construct()
    {
        parent::__construct();
        $this->eventClass = Event::class;
        $this->eventDateClass = EventDate::class;
        $this->bookingClass = Booking::class;
    }

    public function callAction($method, $parameters)
    {
        if(!Event::isEnable())
        {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }
    public function index(Request $request){
        $this->checkPermission('event_create');

        $q = $this->eventClass::query();

        if($request->query('s')){
            $q->where('title','like','%'.$request->query('s').'%');
        }

        if(!$this->hasPermission('event_manage_others')){
            $q->where('create_user',$this->currentUser()->id);
        }

        $q->orderBy('bravo_events.id','desc');

        $rows = $q->paginate(15);

        $current_month = strtotime(date('Y-m-01',time()));

        if($request->query('month')){
            $date = date_create_from_format('m-Y',$request->query('month'));
            if(!$date){
                $current_month = time();
            }else{
                $current_month = $date->getTimestamp();
            }
        }
        $breadcrumbs = [
            [
                'name' => __('Events'),
                'url'  => route('event.vendor.index')
            ],
            [
                'name'  => __('Availability'),
                'class' => 'active'
            ],
        ];
        $page_title = __('Events Availability');

        return view($this->indexView,compact('rows','breadcrumbs','current_month','page_title','request'));
    }

    public function loadDates(Request $request){

        $rules = [
            'id'=>'required',
            'start'=>'required',
            'end'=>'required',
        ];

        $validator = \Validator::make($request->all(), $rules);
        if ($validator->fails()) {
            return $this->sendError($validator->errors());
        }

        $event = $this->eventClass::find($request->query('id'));
        if(empty($event)){
            return $this->sendError(__('Event not found'));
        }
        $is_single = $request->query('for_single');

        $query = $this->eventDateClass::query();
        $query->where('target_id',$request->query('id'));
        $query->where('start_date','>=',date('Y-m-d H:i:s',strtotime($request->query('start'))));
        $query->where('end_date','<=',date('Y-m-d H:i:s',strtotime($request->query('end'))));
        $rows =  $query->take(50)->get();
        $allDates = [];

        $period = periodDate($request->input('start'),$request->input('end'));
        foreach ($period as $dt){
            $date = [
                'id'=>rand(0,999),
                'active'=>0,
                'textColor'=>'#2791fe'
            ];
            $date['start'] = $date['end'] = $dt->format('Y-m-d');
            if($event->default_state){
                $date['active'] = 1;
            }else{
                $date['title'] = $date['event'] = __('Blocked');
                $date['backgroundColor'] = 'orange';
                $date['borderColor'] = '#fe2727';
                $date['classNames'] = ['blocked-event'];
                $date['textColor'] = '#fe2727';
            }
            if ($event->ticket_types) {
                $date['ticket_types'] = $event->ticket_types;
                $c_title = "";
                foreach (  $date['ticket_types']  as &$ticket){
                    if(!$is_single){
                        $c_title .= $ticket['name'].": ".format_money_main($ticket['price'])."<br>";
                        //for single
                        $ticket['display_price'] = format_money_main($ticket['price']);
                    }else{
                        $c_title .= $ticket['name'].": ".format_money($ticket['price'])."<br>";
                        //for single
                        $ticket['display_price'] = format_money($ticket['price']);
                    }
                    $ticket['min'] = 0;
                    $ticket['max'] = $ticket['number'];
                    if($is_single){
                        $ticket['number'] = 0;
                    }
                }
                $date['ticket_types'] = array_values($date['ticket_types']);
                $date['title'] = $date['event']  = $c_title;
            }
            $allDates[$dt->format('Y-m-d')] = $date;
        }

       // dd($rows);

        if(!empty($rows))
        {
            foreach ($rows as $row)
            {
                $ticketData = $allDates[date('Y-m-d',strtotime($row->start_date))];
                $list_ticket_types = null;
                if ($row->ticket_types) {
                    $list_ticket_types = $row->ticket_types;
                    $c_title = "";
                    foreach ( $list_ticket_types as $k=>&$ticket){
                        if(!$is_single){
                            $c_title .= $ticket['name'].": ".format_money_main($ticket['price'])."<br>";
                            //for single
                            $ticket['display_price'] = format_money_main($ticket['price']);
                        }else{
                            $c_title .= $ticket['name'].": ".format_money($ticket['price'])."<br>";
                            //for single
                            $ticket['display_price'] = format_money($ticket['price']);
                        }
                        $ticket['min'] = 0;
                        $ticket['max'] = $ticket['number'];
                        if($is_single){
                            $ticket['number'] = 0;
                        }
                    }
                    $ticketData['title'] = $ticketData['event']  = $c_title;
                }
                $ticketData['ticket_types'] = $list_ticket_types;
                if(!$row->active)
                {
                    $ticketData['title'] = $row->event = __('Blocked');
                    $ticketData['backgroundColor'] = '#fe2727';
                    $ticketData['classNames'] = ['blocked-event'];
                    $ticketData['textColor'] = '#fe2727';
                    $ticketData['active'] = 0;
                }else{
                    $ticketData['classNames'] = ['active-event'];
                    $ticketData['active'] = 1;
                }
                $allDates[date('Y-m-d',strtotime($row->start_date))] = $ticketData;
            }
        }

        $bookings = $this->bookingClass::getAllBookingInRanges($event->id,$event->type,$request->query('start'),$request->query('end'));
        if(!empty($bookings))
        {
            foreach ($bookings as $booking){
                $period = periodDate($booking->start_date,$booking->end_date);
                foreach ($period as $dt){
                    $date = $dt->format('Y-m-d');
                    if(isset($allDates[$date])){
                        $isBook = false;
                        $list_ticket_types = $allDates[$dt->format('Y-m-d')]['ticket_types'];
                        $bookingTicketTypes = $booking->getJsonMeta('ticket_types') ?? [];
                        foreach ($bookingTicketTypes as $bookingTicket){
                            $numberBoook = $bookingTicket['number'];
                            foreach ($list_ticket_types as &$ticket){
                                if( $ticket['code'] == $bookingTicket['code']){
                                    $ticket['max'] =  $ticket['max'] - $numberBoook;
                                    if($ticket['max'] <= 0){
                                        $ticket['max'] = 0;
                                    }
                                }
                                if($ticket['max'] > 0){
                                    $isBook = true;
                                }
                            }
                        }
                        $allDates[$dt->format('Y-m-d')]['ticket_types'] = $list_ticket_types;
                        if($isBook == false){
                            $allDates[$date]['active'] = 0;
                            $allDates[$date]['event'] = __('Full Book');
                            $allDates[$date]['title'] = __('Full Book');
                            $allDates[$date]['classNames'] = ['full-book-event'];
                        }
                    }
                }
            }
        }


        /*if(!empty($event->ical_import_url)){
            $startDate = $request->query('start');
            $endDate = $request->query('end');
            $timezone = setting_item('site_timezone',config('app.timezone'));
            try {
                $icalevents   =  new Ical($event->ical_import_url,[
                    'defaultTimeZone'=>$timezone
                ]);
                $eventRange  = $icalevents->eventsFromRange($startDate,$endDate);
                if(!empty($eventRange)){
                    foreach ($eventRange as $item=>$value){
                        if(!empty($date = $value->dtstart_array[2])){
                            $max_guests = $allDates[date('Y-m-d',$date)]['max_guests'] -1 ;
                            $allDates[date('Y-m-d',$date)]['max_guests']  = $max_guests;
                            if($max_guests ==0){
                                $allDates[date('Y-m-d',$date)]['active'] = 0;
                                $allDates[date('Y-m-d',$date)]['event'] = __('Full Book');
                                $allDates[date('Y-m-d',$date)]['title'] = __('Full Book');
                                $allDates[date('Y-m-d',$date)]['classNames'] = ['full-book-event'];
                            }
                        }
                    }
                }
            }catch (\Exception $exception){
                return $this->sendError($exception->getMessage());
            }
        }*/

        $data = array_values($allDates);

        return response()->json($data);
    }

    public function store(Request $request){

        $request->validate([
            'target_id'=>'required',
            'start_date'=>'required',
            'end_date'=>'required'
        ]);
        $event = $this->eventClass::find($request->input('target_id'));
        $target_id = $request->input('target_id');
        if(empty($event)){
            return $this->sendError(__('Event not found'));
        }
        if(!$this->hasPermission('event_manage_others')){
            if($event->create_user != Auth::id()){
                return $this->sendError("You do not have permission to access it");
            }
        }
        $postData = $request->input();
        $period = periodDate($request->input('start_date'),$request->input('end_date'));
        foreach ($period as $dt){

            $date = $this->eventDateClass::where('start_date',$dt->format('Y-m-d'))->where('target_id',$target_id)->first();
            if(empty($date)){
                $date = new $this->eventDateClass();
                $date->target_id = $target_id;
            }
            $postData['start_date'] = $dt->format('Y-m-d H:i:s');
            $postData['end_date'] = $dt->format('Y-m-d H:i:s');

            $date->fillByAttr([
                'start_date','end_date','active',
            ],$postData);
            $ticket_types = $request->input("ticket_types");
            if(!empty($ticket_types)){
                foreach ( $ticket_types  as &$ticket){
                    unset($ticket['min']);
                    unset($ticket['max']);
                    unset($ticket['display_price']);
                }
            }
            $date->ticket_types = $ticket_types;
            $date->save();
        }
        return $this->sendSuccess([],__("Update Success"));
    }
}
